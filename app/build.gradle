apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'   // ./gradlew dependencyUpdates -Drevision=release

repositories {
    flatDir {
        dirs 'libs'
    }
}

// Manifest version information!
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))
def clientIdIsNotSet = true;
def clientSecretIsNotSet = true;

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId 'com.github.pockethub'
        minSdkVersion 15
        targetSdkVersion 23
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        vectorDrawables.useSupportLibrary = true

        if (project.hasProperty('pockethub_github_client')) {
            resValue "string", "github_client", pockethub_github_client
            clientIdIsNotSet = false
        } else {
            resValue "string", "github_client", "dummy_client"
        }

        if (project.hasProperty('pockethub_github_secret')) {
            resValue "string", "github_secret", pockethub_github_secret
            clientSecretIsNotSet = false
        } else {
            resValue "string", "github_secret", "dummy_secret"
        }

        if (clientIdIsNotSet || clientSecretIsNotSet) {
            logger.warn("You won't be able to login, because the oauth client or secret isn't set")
            logger.warn("Read the README.md: https://github.com/pockethub/PocketHub#setup-environment")
        }

        if (project.hasProperty('pockethub_bugsnag_api_key')) {
            resValue "string", "bugsnag_api_key", pockethub_bugsnag_api_key
        } else {
            resValue "string", "bugsnag_api_key", "bugsnag-api-key"
        }

        String oauth = ""
        if (project.hasProperty('pockethub_github_callback')) {
            oauth = pockethub_github_callback
        } else {
            oauth = "http://dummy.example.com"
        }

        resValue "string", "github_oauth", oauth
        resValue "string", "github_oauth_scheme", oauth.split("://")[0]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        warning 'MissingTranslation'
        abortOnError true
        check 'NewApi', 'InlinedApi'
        fatal 'NewApi', 'InlinedApi'
        checkReleaseBuilds true
        
        textReport isTravis
        textOutput 'stdout'
        
        htmlReport !isTravis
        xmlReport !isTravis
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:design:23.4.0'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp:okhttp:2.7.0'
    compile 'com.squareup.okio:okio:1.6.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'

    compile 'com.github.alorma:github-sdk:3.2.5'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'com.trello:rxlifecycle:0.4.0'
    compile 'com.bugsnag:bugsnag-android:3.2.7'

    compile 'org.roboguice:roboguice:2.0'
    compile 'com.google.code.gson:gson:2.5'

    compile ('com.google.inject.extensions:guice-assistedinject:3.0'){
        exclude group: 'com.google.inject'
    }
    compile('com.github.afollestad.material-dialogs:core:0.8.5.6@aar') {
        transitive = true
    }
    //Self compiled .aar version of wishlist
    compile (name:'lib', ext:'aar')

    //Libs for testing
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}
